import javax.persistence.EntityManager;
import javax.persistence.EntityManagerFactory;
import javax.persistence.Persistence;

public class ManageArtists {
	/**
	 * uses an EntityManager to create a new Artist record in the database
	 * @param firstName
	 * @param lastName
	 * @param bandName
	 * @param bio
	 */
	public void createArtist(String firstName, String lastName, String bandName, String bio) {
		EntityManagerFactory emFactory = Persistence.createEntityManagerFactory("jmf194_Assignment7");
		EntityManager em = emFactory.createEntityManager();
		
		em.getTransaction().begin();
		Artist a = new Artist();
		
		a.setFirstName(firstName);
		a.setLastName(lastName);
		a.setBandName(bandName);
		a.setBio(bio);
		
		em.persist(a);
		em.getTransaction().commit();
		em.close();
		emFactory.close();
	}
	/**
	 * pulls an Artist object from the database based on its ID and then edits its attributes
	 * @param artistID
	 * @param firstName
	 * @param lastName
	 * @param bandName
	 * @param bio
	 */
	public void updateArtist(String artistID, String firstName, String lastName, String bandName, String bio) {
		EntityManagerFactory emFactory = Persistence.createEntityManagerFactory("jmf194_Assignment7");
		EntityManager em = emFactory.createEntityManager();
		em.getTransaction().begin();
		
		Artist a = em.find(Artist.class, artistID);
		
		if (!firstName.equals("")) {
			a.setFirstName(firstName);
		}
		
		if (!lastName.equals("")) {
			a.setLastName(lastName);
		}
		
		if (!bandName.equals("")) {
			a.setBandName(bandName);
		}
		
		if (!bio.equals("")) {
			a.setBio(bio);
		}
		
		em.persist(a);
		em.getTransaction().commit();		
		em.close();
		emFactory.close();
	}
	
	public void deleteArtist(String artistID) {
		EntityManagerFactory emFactory = Persistence.createEntityManagerFactory("jmf194_Assignment7");
		EntityManager em = emFactory.createEntityManager();
		em.getTransaction().begin();
		
		Artist a = em.find(Artist.class, artistID);
		em.remove(a);
		em.getTransaction().commit();
		em.close();
		emFactory.close();
	}
	
	public Artist findArtist(String artistID) {
		EntityManagerFactory emFactory = Persistence.createEntityManagerFactory("jmf194_Assignment7");
		EntityManager em = emFactory.createEntityManager();
		em.getTransaction().begin();
		
		Artist a = em.find(Artist.class, artistID);
		em.getTransaction().commit();
		em.close();
		emFactory.close();
		return a;
	}
}
